var viewer, model, filename, camera, controls, scene, mesh, renderer, textureLoader, redraw, nexus_obj, material, smoothing, uploadId;

function initializeModelViewer() {
  viewer = document.getElementById('js-viewer-container');

  if (viewer !== null) {
    viewer.style.height = (viewer.offsetWidth / 2) + "px";
    uploadId = viewer.dataset.uploadId;
    model = viewer.dataset.link;
    filename = viewer.dataset.filename;
    screenshotType = viewer.dataset.screenshotType;
    smoothing = viewer.dataset.smoothing === "true" ? true : false;
    textureLoader = new THREE.TextureLoader();
    redraw = true;

    // Detect
    if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

    // Configure Camera
    camera = new THREE.PerspectiveCamera(30, viewer.offsetWidth / viewer.offsetHeight, 0.1, 1000);
    camera.position.z = 8;

    // Configure Scene
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x545259);
    scene.fog = new THREE.Fog(0x050505, 2000, 3500)

    var hemisphereLight = new THREE.HemisphereLight();
    scene.add(hemisphereLight);

    var light1 = new THREE.DirectionalLight(0xffffff, 1.0);
    light1.name = 'directanial light 1';
    light1.position.set(1, 1, 1);
    light1.intensity = 0.35;
    scene.add(light1);

    var light2 = new THREE.DirectionalLight(0xffffff, 1.0);
    light2.name = 'directanial light 2';
    light2.position.set(-1, -1, 1);
    light2.intensity = 0.35;
    scene.add(light2);

    var light3 = new THREE.DirectionalLight(0xffffff, 1.0);
    light3.name = 'directanial light 3';
    light3.position.set(1, 1, -1);
    light3.intensity = 0.35;
    scene.add(light3);

    renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });
    renderer.setClearColor(scene.fog.color);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(viewer.offsetWidth, viewer.offsetHeight);
    viewer.appendChild(renderer.domElement);

    // Configure Controls
    controls = new THREE.TrackballControls(camera, renderer.domElement);
    controls.rotateSpeed = 10.0;
    controls.zoomSpeed = 2;
    controls.panSpeed = 0.8;
    controls.noPan = false;
    controls.enableDamping = true;
    controls.dampingFactor = 0.3;
    controls.staticMoving = true;
    controls.keys = [ 65, 83, 16 ]; // [ rotateKey, zoomKey, panKey ]
    controls.addEventListener('change', function() {
      redraw = true;
    });

    // Configure Mesh
    material = new THREE.MeshStandardMaterial({ color: 0xffffff });
    nexus_obj = new NexusObject(model, onNexusLoad, function() {
      redraw = true
    }, renderer, material);

    scene.add(nexus_obj);

    window.addEventListener('resize', onWindowResize, false);

    animate();

    $('.js-viewer-smoothing').click(function() {
      changeSmoothing(nexus_obj);
    });
    $(document).on('fullscreenchange webkitfullscreenchange mozfullscreenchange MSFullscreenChange', function() {
      $('.js-viewer-snapshot').toggleClass('dn');
    });
    $('.js-container-fullscreen').click(function() {
      if (window.innerHeight >= screen.height) {
        if (document.exitFullscreen) { document.exitFullscreen() }
        else if (document.webkitExitFullscreen) { document.webkitExitFullscreen() }
        else if (document.mozExitFullscreen) { document.mozExitFullscreen() }
        else if (document.msExitFullscreen) { document.msExitFullscreen() }
        onWindowResize();
      } else {
        if ($('.js-container-fullscreen').parent()[0].requestFullscreen) { $('.js-container-fullscreen').parent()[0].requestFullscreen() }
        else if ($('.js-container-fullscreen').parent()[0].mozRequestFullScreen) { $('.js-container-fullscreen').parent()[0].mozRequestFullScreen() }
        else if ($('.js-container-fullscreen').parent()[0].webkitRequestFullScreen) { $('.js-container-fullscreen').parent()[0].webkitRequestFullScreen() }
        else if ($('.js-container-fullscreen').parent()[0].msRequestFullscreen) { $('.js-container-fullscreen').parent()[0].msRequestFullscreen() }
      }
      setTimeout(function() { animate(); }, 700); // re-render after fullscreen for distortion issues
    });
    $('.js-viewer-snapshot').click(function() {
      try {
        var strippedFilename = filename.replace(/\.[^/.]+$/, "");
        var constructedFilename = strippedFilename + "_" + Date.now() + '.jpeg';
        var imgData = renderer.domElement.toDataURL("image/jpeg");

        if (screenshotType === 'aws') {
          saveFile(imgData, constructedFilename);
        } else {
          downloadFile(imgData.replace("image/jpeg", "image/octet-stream"), constructedFilename)
        }
      } catch (e) {
        console.log(e);
        return;
      }
    });
  }
}

function onNexusLoad() {
  var s = 1 / nexus_obj.geometry.boundingSphere.radius;
  var p = nexus_obj.geometry.boundingBox.getCenter().negate();
  nexus_obj.position.set(p.x * s, p.y * s, p.z * s); //.set(p.x, p.y, p.z); // = p; //.set(p.x, p.y, p.z);
  nexus_obj.scale.set(s, s, s);

  changeMaterial({
    roughness: 0.69,
    metalness: 0.60,
    color: new THREE.Color(0xfbfbfb)
  }, nexus_obj)

  if (smoothing === false) {
    nexus_obj.material.flatShading = true;
    nexus_obj.material.needsUpdate = true;
  }

  redraw = true;
}

function onWindowResize() {
  viewer.style.height = (viewer.offsetWidth / 2) + "px";
  camera.aspect = viewer.offsetWidth / viewer.offsetHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(viewer.offsetWidth, viewer.offsetHeight);

  controls.handleResize();
  controls.update();
  renderer.render(scene, camera);
}

function changeMaterial(obj, mesh) {
	for (var key in obj) {
		if (mesh.material[key])
			mesh.material[key] = obj[key];
	}
	mesh.material.needsUpdate = true;
	redraw = true;
}

function changeSmoothing(mesh) {
  if (smoothing !== true) {
    smoothing = true;
    mesh.material.flatShading = false;
    mesh.material.needsUpdate = true;
  } else {
    smoothing = false;
    mesh.material.flatShading = true;
    mesh.material.needsUpdate = true;
  }

  mesh.material.needsUpdate = true;
  redraw = true;

  $.ajax({
    type: 'POST',
    url: '/uploads/' + uploadId + '/smoothing',
    data: JSON.stringify({}),
    beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').last().attr('content'))},
    contentType: 'application/json; charset=utf-8',
    success: function (response) {
      // response doesn't matter
    },
    error: function(xhr, status, response) {
      // response doesn't matter
    }
  });
}

function animate() {
  requestAnimationFrame(animate);
  controls.update();

  if (redraw) {
    renderer.render(scene, camera);
  }
  redraw = false;
}

function saveFile(imgData, filename) {
  var project_id, url;

  if (window.location.pathname.indexOf('admin') == 1) {
    project_id = parseInt(window.location.pathname.split("/")[3]) - 100000;
    url = '/admin/uploads';
  } else {
    project_id = parseInt(window.location.pathname.split("/")[2]) - 100000;
    url = '/uploads';
  }

  var data = {
    upload: {
      project_id: project_id,
      viewer_filename: filename,
      viewer_image: imgData
    }
  }

  $.ajax({
    type: 'POST',
    url: url,
    data: JSON.stringify(data),
    beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').last().attr('content'))},
    contentType: 'application/json; charset=utf-8',
    success: function (response) {
      // response is unobtrusive javascript
    },
    error: function(xhr, status, response) {
      // response is unobtrusive javascript
    }
  });
}
function downloadFile(imgData, filename) {
  var link = document.createElement('a');
  if (typeof link.download === 'string') {
    document.body.appendChild(link); //Firefox requires the link to be in the body
    link.download = filename;
    link.href = imgData;
    link.click();
    document.body.removeChild(link); //remove the link when done
  } else {
    location.replace(uri);
  }
}
